C51 COMPILER V9.00   HWI2C                                                                 07/03/2017 18:41:19 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE HWI2C
OBJECT MODULE PLACED IN .\Obj\hwi2c.obj
COMPILER INVOKED BY: C:\Keil4\C51\BIN\C51.EXE ..\Code\hwi2c.c OPTIMIZE(9,SPEED) BROWSE INCDIR(..\Code\INC;..\Code\DRIVER
                    -\INC;..\Code\DRIVER\MST9U\INC;..\Code\DRIVER\MST9U3\INC) DEFINE(ModelName=MST9U3_DEMO,CHIP_ID=MST9U3) DEBUG OBJECTEXTEND
                    - PRINT(.\List\hwi2c.lst) OBJECT(.\Obj\hwi2c.obj)

line level    source

   1          #include "Types.h"
   2          #include "Board.h"
   3          //#include "MDebug.h"
   4          #include "Common.h"
   5          #include "misc.h"
   6          #include "Global.h"
   7          #include "ms_reg.h"
   8          #include "Ms_rwreg.h"
   9          #include "hwi2c.h"
  10          
  11          
  12          #define HW_I2C_SPEED     400000ul
  13          #define SYSTEM_CLOCK     12000000ul
  14          #define HIGH_COUNT      ((SYSTEM_CLOCK/HW_I2C_SPEED)*6/10)
  15          #define LOW_COUNT       ((SYSTEM_CLOCK/HW_I2C_SPEED)*4/10)
  16          #define START_COUNT     (LOW_COUNT>>2)
  17          #define STOP_COUNT      (LOW_COUNT>>2)
  18          
  19          #define SDA_COUNT         4
  20          #define LATCH_COUNT     2
  21          
  22          #define WAIT_READY()    (msReadByte(HWI2C_REG_BANK+0x08) & _BIT0) 
  23          #define CLEARFLAG()      msWriteByte(HWI2C_REG_BANK+0x08, 0x00) 
  24          #define CHECK_NONACK()    (msReadByte(HWI2C_REG_BANK+0x05) & _BIT0) 
  25          #if (HW_I2C_SPEED > 400000ul)
              #warning "Hw I2c speek must under 400kHz !"
              #endif
  28          
  29          #if (USE_SW_I2C == 0)
              void i2C_Intial(void)
              {
                  // Config. PAD mux
                  msWriteByteMask(REG_000405, MIIC0_ENABLE, MIIC0_ENABLE_MASK);
                  msWriteByteMask(REG_000405, MIIC1_ENABLE, MIIC1_ENABLE_MASK);    
                  
                  // Init I2C speed
                  msWrite2Byte(HWI2C_HIGH_CNT_REG, HIGH_COUNT );
                  msWrite2Byte(HWI2C_LOW_CNT_REG, LOW_COUNT);
                  msWrite2Byte(HWI2C_START_CNT_REG, START_COUNT);
                  msWrite2Byte(HWI2C_STOP_CNT_REG, STOP_COUNT);
                  msWrite2Byte(HWI2C_SDA_CNT_REG, SDA_COUNT);
                  msWrite2Byte(HWI2C_LATCH_CNT_REG, LATCH_COUNT);    
                  //Reset 
                  //msWriteByte(HWI2C_CONFIG_REG, 0x21);
                  //msWriteByte(HWI2C_CONFIG_REG, 0x20);
                  msWriteByteMask(HWI2C_CONFIG_REG, BIT6|BIT5|BIT0    , BIT6|BIT5|BIT0);     //Enable reg_oen_push_en
                  msWriteByteMask(HWI2C_CONFIG_REG, BIT6|BIT5         , BIT6|BIT5|BIT0);    
                      
                  //Delay1ms(2);    
              }
              
              
              #define BREAK_TIME          5 //ms
C51 COMPILER V9.00   HWI2C                                                                 07/03/2017 18:41:19 PAGE 2   

              #define GET_MS_COUNT() ((ms_Counter < BREAK_TIME)?(ms_Counter+ SystemTick):(ms_Counter))
              
              BOOL i2c_Start(void)
              {
                  WORD Break_count;    
              
                  //Trigger Start
                  msWriteByte(HWI2C_REG_BANK +0x02, 0x01);
                  Break_count =  GET_MS_COUNT()-BREAK_TIME;    
                  while(WAIT_READY() == FALSE)
                  {
                      if(Break_count == ms_Counter)
                          break;
                  }
                  CLEARFLAG();
                  return TRUE;
              }
              
              void i2c_Stop(void)
              {
                  WORD Break_count;
              
                  //Trigger Stop
                  msWriteByte(HWI2C_REG_BANK +0x03, 0x01);
                  Break_count =  GET_MS_COUNT()-BREAK_TIME;    
                  while(WAIT_READY() == FALSE)
                  {
                      if(Break_count == ms_Counter)
                          break;
                  }
                  CLEARFLAG();
              }
              
              
              bit i2c_SendByte(BYTE ucWriteData)  
              {
                  bit ucACK = TRUE;
                  WORD Break_count;
                  
                  msWriteByte(HWI2C_WDATA_REG, ucWriteData);
                  Break_count =  GET_MS_COUNT()-BREAK_TIME;    
                  while(WAIT_READY() == FALSE)
                  {
                      if(Break_count == ms_Counter)
                          break;
                  }
                  if(CHECK_NONACK())
                      ucACK = FALSE;
                   
                  CLEARFLAG();
              
                  return ucACK;
              }
              
              BYTE i2c_ReceiveByte(BOOL bAck)
              {
                  BYTE ucReceiveByte;
                  WORD Break_count;
                  
                  if(bAck)
                      msWriteByte(HWI2C_REG_BANK +0x07, 0x01);
                  else
C51 COMPILER V9.00   HWI2C                                                                 07/03/2017 18:41:19 PAGE 3   

                      msWriteByte(HWI2C_REG_BANK +0x07, 0x03);
                      
                  Break_count =  GET_MS_COUNT() - BREAK_TIME;    
                  while(WAIT_READY() == FALSE)
                  {
                      if(Break_count == ms_Counter)
                          break;
                  }
                  CLEARFLAG();
                  ucReceiveByte = msReadByte(HWI2C_RDATA_REG);
                  
                  return TRUE;
              }
              
              #endif
 131          
 132          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
