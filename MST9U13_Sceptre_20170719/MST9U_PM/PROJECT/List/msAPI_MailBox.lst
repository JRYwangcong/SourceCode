C51 COMPILER V9.00   MSAPI_MAILBOX                                                         07/03/2017 18:41:25 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MSAPI_MAILBOX
OBJECT MODULE PLACED IN .\Obj\msAPI_MailBox.obj
COMPILER INVOKED BY: C:\Keil4\C51\BIN\C51.EXE ..\Code\msAPI_MailBox.c OPTIMIZE(9,SPEED) BROWSE INCDIR(..\Code\INC;..\Cod
                    -e\DRIVER\INC;..\Code\DRIVER\MST9U\INC;..\Code\DRIVER\MST9U3\INC) DEFINE(ModelName=MST9U3_DEMO,CHIP_ID=MST9U3) DEBUG OBJE
                    -CTEXTEND PRINT(.\List\msAPI_MailBox.lst) OBJECT(.\Obj\msAPI_MailBox.obj)

line level    source

   1          //<MStar Software>
   2          //******************************************************************************
   3          // MStar Software
   4          // Copyright (c) 2010 - 2012 MStar Semiconductor, Inc. All rights reserved.
   5          // All software, firmware and related documentation herein ("MStar Software") are
   6          // intellectual property of MStar Semiconductor, Inc. ("MStar") and protected by
   7          // law, including, but not limited to, copyright law and international treaties.
   8          // Any use, modification, reproduction, retransmission, or republication of all
   9          // or part of MStar Software is expressly prohibited, unless prior written
  10          // permission has been granted by MStar.
  11          //
  12          // By accessing, browsing and/or using MStar Software, you acknowledge that you
  13          // have read, understood, and agree, to be bound by below terms ("Terms") and to
  14          // comply with all applicable laws and regulations:
  15          //
  16          // 1. MStar shall retain any and all right, ownership and interest to MStar
  17          //    Software and any modification/derivatives thereof.
  18          //    No right, ownership, or interest to MStar Software and any
  19          //    modification/derivatives thereof is transferred to you under Terms.
  20          //
  21          // 2. You understand that MStar Software might include, incorporate or be
  22          //    supplied together with third party`s software and the use of MStar
  23          //    Software may require additional licenses from third parties.
  24          //    Therefore, you hereby agree it is your sole responsibility to separately
  25          //    obtain any and all third party right and license necessary for your use of
  26          //    such third party`s software.
  27          //
  28          // 3. MStar Software and any modification/derivatives thereof shall be deemed as
  29          //    MStar`s confidential information and you agree to keep MStar`s
  30          //    confidential information in strictest confidence and not disclose to any
  31          //    third party.
  32          //
  33          // 4. MStar Software is provided on an "AS IS" basis without warranties of any
  34          //    kind. Any warranties are hereby expressly disclaimed by MStar, including
  35          //    without limitation, any warranties of merchantability, non-infringement of
  36          //    intellectual property rights, fitness for a particular purpose, error free
  37          //    and in conformity with any international standard.  You agree to waive any
  38          //    claim against MStar for any loss, damage, cost or expense that you may
  39          //    incur related to your use of MStar Software.
  40          //    In no event shall MStar be liable for any direct, indirect, incidental or
  41          //    consequential damages, including without limitation, lost of profit or
  42          //    revenues, lost or damage of data, and unauthorized system use.
  43          //    You agree that this Section 4 shall still apply without being affected
  44          //    even if MStar Software has been modified by MStar in accordance with your
  45          //    request or instruction for your use, except otherwise agreed by both
  46          //    parties in writing.
  47          //
  48          // 5. If requested, MStar may from time to time provide technical supports or
  49          //    services in relation with MStar Software to you for your use of
  50          //    MStar Software in conjunction with your or your customer`s product
  51          //    ("Services").
  52          //    You understand and agree that, except otherwise agreed by both parties in
  53          //    writing, Services are provided on an "AS IS" basis and the warranty
C51 COMPILER V9.00   MSAPI_MAILBOX                                                         07/03/2017 18:41:25 PAGE 2   

  54          //    disclaimer set forth in Section 4 above shall apply.
  55          //
  56          // 6. Nothing contained herein shall be construed as by implication, estoppels
  57          //    or otherwise:
  58          //    (a) conferring any license or right to use MStar name, trademark, service
  59          //        mark, symbol or any other identification;
  60          //    (b) obligating MStar or any of its affiliates to furnish any person,
  61          //        including without limitation, you and your customers, any assistance
  62          //        of any kind whatsoever, or any information; or
  63          //    (c) conferring any license or right under any intellectual property right.
  64          //
  65          // 7. These terms shall be governed by and construed in accordance with the laws
  66          //    of Taiwan, R.O.C., excluding its conflict of law rules.
  67          //    Any and all dispute arising out hereof or related hereto shall be finally
  68          //    settled by arbitration referred to the Chinese Arbitration Association,
  69          //    Taipei in accordance with the ROC Arbitration Law and the Arbitration
  70          //    Rules of the Association by three (3) arbitrators appointed in accordance
  71          //    with the said Rules.
  72          //    The place of arbitration shall be in Taipei, Taiwan and the language shall
  73          //    be English.
  74          //    The arbitration award shall be final and binding to both parties.
  75          //
  76          //******************************************************************************
  77          //<MStar Software>
  78          ////////////////////////////////////////////////////////////////////////////////
  79          //
  80          // Copyright (c) 2006-2009 MStar Semiconductor, Inc.
  81          // All rights reserved.
  82          //
  83          // Unless otherwise stipulated in writing, any and all information contained
  84          // herein regardless in any format shall remain the sole proprietary of
  85          // MStar Semiconductor Inc. and be kept in strict confidence
  86          // (¡§MStar Confidential Information¡¨) by the recipient.
  87          // Any unauthorized act including without limitation unauthorized disclosure,
  88          // copying, use, reproduction, sale, distribution, modification, disassembling,
  89          // reverse engineering and compiling of the contents of MStar Confidential
  90          // Information is unlawful and strictly prohibited. MStar hereby reserves the
  91          // rights to any and all damages, losses, costs and expenses resulting therefrom.
  92          //
  93          /// @file   drvdma.c
  94          /// @brief  DRAM BDMA control driver
  95          /// @author MStar Semiconductor Inc.
  96          ///
  97          ////////////////////////////////////////////////////////////////////////////////
  98          
  99          ////////////////////////////////////////////////////////////////////////////////
 100          /// The File is the Wrapper for MBX Driver on Chakra2
 101          /// The Usage of App Could be as Below:
 102          /// ----App Init:
 103          /// --------0. If Need, MApi_MBX_SetInformation(info, size) to Init & Sync. with Co-Processor
 104          /// --------1. MApi_MBX_Init();
 105          /// --------2. MApi_MBX_Enable(TRUE);
 106          /// --------3. MApi_MBX_RegisterMSG(classes, queue_size);
 107          /// ----App Run:
 108          /// --------1. Send Mail: MApi_MBX_SendMsg(pMsg);
 109          /// -------------Do not need to set pMsg->eRoleID/u8Ctrl/u8S0/u8S1
 110          /// --------2. Recv Mail:
 111          /// ------------a). MApi_MBX_GetMsgQueueStatus(class, status);
 112          /// ------------b). while(status.stillhasMail) MApi_MBX_RecvMsg(pMsg);
 113          /// --------3. Reset Mail Queue: MApi_MBX_ClearMSG(class);
 114          /// ----App Exit:
 115          /// --------1. MApi_MBX_UnRegisterMSG(class);
C51 COMPILER V9.00   MSAPI_MAILBOX                                                         07/03/2017 18:41:25 PAGE 3   

 116          /// --------2. MApi_MBX_Enable(FALSE);
 117          /// --------3. MApi_MBX_DeInit();
 118          ////////////////////////////////////////////////////////////////////////////////
 119          
 120          #define _MSAPI_MAILBOX_C_
 121          
 122          ////////////////////////////////////////////////////////////////////////////////
 123          // Include List
 124          ////////////////////////////////////////////////////////////////////////////////
 125          #include "Types.h"
 126          #include "msAPI_MailBox.h"
 127          #if ENABLE_MBX
              ////////////////////////////////////////////////////////////////////////////////
              // Local defines & local structures
              ////////////////////////////////////////////////////////////////////////////////
              #define MAPI_MBX_DEBUG  1
              
              ////////////////////////////////////////////////////////////////////////////////
              // Local Global Variables
              ////////////////////////////////////////////////////////////////////////////////
              
              
              ////////////////////////////////////////////////////////////////////////////////
              // External Funciton
              ////////////////////////////////////////////////////////////////////////////////
              
              
              ////////////////////////////////////////////////////////////////////////////////
              // Global Funciton
              ////////////////////////////////////////////////////////////////////////////////
              //-------------------------------------------------------------------------------------------------
              /// Set Information to dedicated Mailbox HW Regs.
              /// @param  pU8Info \b IN: The Information which need to set
              /// @param  u8Size \b IN: The Size(bytes) of pU8Info
              /// @return E_MBX_SUCCESS
              /// @return E_MBX_ERR_INVALID_PARAM
              /// @return E_MBX_UNKNOW_ERROR
              /// @attention
              /// <b>[MXLIB] <em>It is used for speciall need when Init-Coprocesser.
              ///                 Could be called before MDrv_MBX_Init
              ///                 Could only be called from HK</em></b>
              //-------------------------------------------------------------------------------------------------
              MBX_Result MApi_MBX_SetInformation(BYTE *pU8Info, BYTE u8Size)
              {
                  return MDrv_MBX_SetInformation(E_MBX_ROLE_CP, pU8Info, u8Size);
              }
              
              /// House Keeping do not support this API.
              MBX_Result MApi_MBX_GetInformation(BYTE *pU8Info, BYTE u8Size)
              {
                  return MDrv_MBX_GetInformation(E_MBX_ROLE_CP, pU8Info, u8Size);
              }
              
              //-------------------------------------------------------------------------------------------------
              /// Init Mailbox
              /// @return E_MBX_SUCCESS
              /// @return E_MBX_ERR_NOT_INITIALIZED
              /// @return E_MBX_ERR_NO_MORE_MEMORY
              /// @return E_MBX_UNKNOW_ERROR
              /// @attention
              /// <b>[MXLIB] <em></em></b>
              //-------------------------------------------------------------------------------------------------
C51 COMPILER V9.00   MSAPI_MAILBOX                                                         07/03/2017 18:41:25 PAGE 4   

              MBX_Result MApi_MBX_Init(void)
              {
                  MBX_CPU_ID XDATA eHKCPU;
                  WORD XDATA u32TimeoutMillSecs = 1500;
                  Init_MBX();
              #if MAPI_MBX_DEBUG
                  MDrv_MBX_SetDbgLevel(MBX_DBG_LEVEL_ALL);
              #endif
              
              #if defined(MIPS_CHAKRA)
                  eHKCPU = E_MBX_CPU_MIPS;
              #else
                #ifdef __AEONR2__
                  eHKCPU = E_MBX_CPU_R2M;
                #else
                  eHKCPU = E_MBX_CPU_AEON;
                #endif
              #endif
              
                  eHKCPU = E_MBX_CPU_AEON;
                  return MDrv_MBX_Init(eHKCPU, E_MBX_ROLE_CP, u32TimeoutMillSecs);
              }
              
              //-------------------------------------------------------------------------------------------------
              /// Deinitialize Mailbox
              /// @return E_MBX_SUCCESS
              /// @return E_MBX_ERR_NOT_INITIALIZED
              /// @return E_MBX_ERR_HAS_MSG_PENDING
              /// @return E_MBX_UNKNOW_ERROR
              /// @attention
              /// <b>[MXLIB] <em> </em></b>
              //-------------------------------------------------------------------------------------------------
              MBX_Result MApi_MBX_DeInit(void)
              {
                  return MDrv_MBX_DeInit(TRUE);
              }
              
              //-------------------------------------------------------------------------------------------------
              /// Enable Message Queue to recv message from peer CPUs, Enable receiving regisited messages in kernel
              /// Covered by Reference Cnt which means maybe won't take effect.
              /// @param  bEnable \b IN: Enable or not
              ///                  - # TRUE: enable
              ///                  - # FALSE: disable
              /// @return E_MBX_SUCCESS
              /// @return E_MBX_ERR_NOT_INITIALIZED
              /// @return E_MBX_UNKNOW_ERROR
              /// @attention
              /// <b>[MXLIB] <em> </em></b>
              //-------------------------------------------------------------------------------------------------
              MBX_Result MApi_MBX_Enable(Bool bEnable)
              {
                  return MDrv_MBX_Enable(bEnable);
              }
              
              //-------------------------------------------------------------------------------------------------
              /// Regisiter Message queue for special class
              /// @param  eMsgClass \b IN: Mail Message Class, @ref MBX_Class
              /// @param  u16MsgQueueSize \b IN: The mail message queue size,
              ///                                The Max should not exceed @ref MAX_MBX_QUEUE_SIZE
              /// @return E_MBX_SUCCESS
              /// @return E_MBX_ERR_NOT_INITIALIZED
              /// @return E_MBX_ERR_NO_MORE_MEMORY
C51 COMPILER V9.00   MSAPI_MAILBOX                                                         07/03/2017 18:41:25 PAGE 5   

              /// @return E_MBX_ERR_SLOT_BUSY
              /// @return E_MBX_ERR_SLOT_AREADY_OPENNED
              /// @return E_MBX_ERR_INVALID_PARAM
              /// @return E_MBX_UNKNOW_ERROR
              /// @attention
              /// <b>[MXLIB] <em> </em></b>
              //-------------------------------------------------------------------------------------------------
              MBX_Result MApi_MBX_RegisterMSG(MBX_Class eMsgClass, WORD u16MsgQueueSize)
              {
                  return MDrv_MBX_RegisterMSG(eMsgClass, u16MsgQueueSize);
              }
              
              //-------------------------------------------------------------------------------------------------
              /// Regisiter Message queue for special class With Callback Handler Function
              /// @param  eMsgClass \b IN: Mail Message Class, @ref MBX_Class
              /// @param  u16MsgQueueSize \b IN: The mail message queue size,
              ///                                The Max should not exceed @ref MAX_MBX_QUEUE_SIZE
              /// @param  notifier \b IN: status change notify call function about this message queue, could be NULL
              /// @return E_MBX_SUCCESS
              /// @return E_MBX_ERR_NOT_IMPLEMENTED
              /// @return E_MBX_ERR_NOT_INITIALIZED
              /// @return E_MBX_ERR_NO_MORE_MEMORY
              /// @return E_MBX_ERR_SLOT_BUSY
              /// @return E_MBX_ERR_SLOT_AREADY_OPENNED
              /// @return E_MBX_ERR_INVALID_PARAM
              /// @return E_MBX_UNKNOW_ERROR
              /// @attention
              /// <b>[MXLIB] <em> </em></b>
              //-------------------------------------------------------------------------------------------------
              /*
              MBX_Result MApi_MBX_RegisterMSGWithCallBack(MBX_Class eMsgClass, WORD u16MsgQueueSize, MBX_MAIL_ARRIVE_NOT
             -IFY_FUNC notifier)
              {
                  return MDrv_MBX_RegisterMSGWithCallBack(eMsgClass, u16MsgQueueSize, notifier);
              }
              */
              //-------------------------------------------------------------------------------------------------
              /// UnRegisiter Message queue for special class
              /// @param  eMsgClass \b IN: Mail Message Class, @ref MBX_Class
              /// @param  bForceDiscardMsgQueue    \b IN: If Discard Pending Mail Message or not \n
              ///              - # TRUE: Discard it and De-Init
              ///              - # FALSE: if has pending mail message,
              ///                     No Discard and Do not De-Init, return E_MBX_ERR_HAS_MSG_PENDING
              /// @return E_MBX_SUCCESS
              /// @return E_MBX_ERR_INVALID_PARAM
              /// @return E_MBX_ERR_NOT_INITIALIZED
              /// @return E_MBX_ERR_SLOT_NOT_OPENNED
              /// @return E_MBX_ERR_HAS_MSG_PENDING
              /// @return E_MBX_UNKNOW_ERROR
              /// @attention
              /// <b>[MXLIB] <em> </em></b>
              //-------------------------------------------------------------------------------------------------
              MBX_Result MApi_MBX_UnRegisterMSG(MBX_Class eMsgClass)
              {
                  return MDrv_MBX_UnRegisterMSG(eMsgClass, TRUE);
              }
              
              //-------------------------------------------------------------------------------------------------
              /// Check the message queue status of a special message class
              /// @param  eTargetClass \b IN: target class, @ref MBX_Class
              /// @param  pMsgQueueStatus \b IN: return the queue status, @ref MBX_MSGQ_Status
              /// @return E_MBX_SUCCESS
C51 COMPILER V9.00   MSAPI_MAILBOX                                                         07/03/2017 18:41:25 PAGE 6   

              /// @return E_MBX_ERR_INVALID_PARAM
              /// @return E_MBX_ERR_NOT_INITIALIZED
              /// @return E_MBX_ERR_SLOT_NOT_OPENNED
              /// @return E_MBX_UNKNOW_ERROR
              /// @attention
              /// <b>[MXLIB] <em> </em></b>
              //-------------------------------------------------------------------------------------------------
              MBX_Result MApi_MBX_GetMsgQueueStatus(MBX_Class eTargetClass, MBX_MSGQ_Status *pMsgQueueStatus)
              {
                  return MDrv_MBX_GetMsgQueueStatus(eTargetClass, pMsgQueueStatus);
              }
              
              //-------------------------------------------------------------------------------------------------
              /// Send message
              /// @param  pMsg \b IN: Mail Message Class for sending, must not be NULL, @ref MBX_Msg
              /// @return E_MBX_SUCCESS
              /// @return E_MBX_ERR_INVALID_PARAM
              /// @return E_MBX_ERR_NOT_INITIALIZED
              /// @return E_MBX_ERR_SLOT_NOT_OPENNED
              /// @return E_MBX_ERR_INVALID_CPU_ID
              /// @return E_MBX_ERR_PEER_CPU_BUSY
              /// @return E_MBX_ERR_PEER_CPU_NOT_ALIVE
              /// @return E_MBX_ERR_PEER_CPU_OVERFLOW
              /// @return E_MBX_ERR_TIME_OUT
              /// @return E_MBX_UNKNOW_ERROR
              /// @attention
              /// <b>[MXLIB] <em> </em></b>
              //-------------------------------------------------------------------------------------------------
              MBX_Result MApi_MBX_SendMsg(MBX_Msg *pMsg)
              {
                  if(NULL == pMsg)
                  {
                      return E_MBX_ERR_INVALID_PARAM;
                  }
              
                  pMsg->eRoleID = E_MBX_ROLE_HK;
                  pMsg->u8Ctrl = pMsg->u8S0 = pMsg->u8S1 = 0x0;
              
                  return MDrv_MBX_SendMsg(pMsg);
              }
              
              //-------------------------------------------------------------------------------------------------
              /// Recv message
              /// @param  eTargetClass \b IN: target class, @ref MBX_Class
              /// @param  pMsg \b IN: Mail Message Class for receive, must not be NULL, @ref MBX_Msg
              /// @param  u32WaitMillSecs \b IN: if MBX_CHECK_BLOCK_RECV, indentify the timeout millsecons before return
              /// @param  u32Flag \b IN: recv flag, has the following possible meaning bits
              ///                  - # MBX_CHECK_ALL_MSG_CLASS: recv any message class, this means, the targetClass is u
             -seless if this bit is set.
              ///                  - # MBX_CHECK_INSTANT_MSG: check INSTANT message.
              ///                  - # MBX_CHECK_NORMAL_MSG: Check Normal message.
              ///                  - # MBX_CHECK_BLOCK_RECV: block this function call until time out if no message avail
             -able.
              /// @return E_MBX_SUCCESS
              /// @return E_MBX_ERR_INVALID_PARAM
              /// @return E_MBX_ERR_NOT_INITIALIZED
              /// @return E_MBX_ERR_SLOT_NOT_OPENNED
              /// @return E_MBX_ERR_NO_MORE_MSG
              /// @return E_MBX_ERR_TIME_OUT
              /// @return E_MBX_UNKNOW_ERROR
              /// @attention
              /// <b>[MXLIB] <em> </em></b>
C51 COMPILER V9.00   MSAPI_MAILBOX                                                         07/03/2017 18:41:25 PAGE 7   

              //-------------------------------------------------------------------------------------------------
              MBX_Result MApi_MBX_RecvMsg(MBX_Class eTargetClass, MBX_Msg *pMsg, WORD u32WaitMillSecs, WORD u32Flag)
              {
                  return MDrv_MBX_RecvMsg(eTargetClass, pMsg, u32WaitMillSecs, u32Flag);
              }
              
              //-------------------------------------------------------------------------------------------------
              /// Clear Message queue for special class
              /// @param  eMsgClass \b IN: Mail Message Class, @ref MBX_Class
              /// @return E_MBX_SUCCESS
              /// @return E_MBX_ERR_INVALID_PARAM
              /// @return E_MBX_ERR_NOT_INITIALIZED
              /// @return E_MBX_ERR_SLOT_NOT_OPENNED
              /// @return E_MBX_UNKNOW_ERROR
              /// @attention
              /// <b>[MXLIB] <em> </em></b>
              //-------------------------------------------------------------------------------------------------
              MBX_Result MApi_MBX_ClearMSG(MBX_Class eMsgClass)
              {
                  return MDrv_MBX_ClearMSG(eMsgClass);
              }
              void Mailbox_dummy(void)
              {
                  MApi_MBX_SetInformation(0,0);
                  MApi_MBX_GetInformation(0,0);
                  MApi_MBX_DeInit();
                  MDrv_MBX_SendMsgLoopback(0,0);
                  MDrv_MBX_GetInformation(0,0,0);
                  MDrv_MBX_SetInformation(0,0,0);
              
                  MDrv_MBX_GetInfo(0);
                  MDrv_MBX_GetStatus(0);
                  MApi_MBX_UnRegisterMSG(0);
                  MApi_MBX_ClearMSG(0);
                  MApi_MBX_GetMsgQueueStatus(0,0);
                  MApi_MBX_RecvMsg(0,0,0,0);
                  MApi_MBX_RegisterMSG(0,0);
                  MApi_MBX_SendMsg(0);
              }
              #endif  //ENABLE_MBX
 401          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
