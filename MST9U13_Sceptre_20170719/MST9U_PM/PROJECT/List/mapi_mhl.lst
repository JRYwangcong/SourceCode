C51 COMPILER V9.00   MAPI_MHL                                                              07/03/2017 18:41:26 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MAPI_MHL
OBJECT MODULE PLACED IN .\Obj\mapi_mhl.obj
COMPILER INVOKED BY: C:\Keil4\C51\BIN\C51.EXE ..\Code\mapi_mhl.c OPTIMIZE(9,SPEED) BROWSE INCDIR(..\Code\INC;..\Code\DRI
                    -VER\INC;..\Code\DRIVER\MST9U\INC;..\Code\DRIVER\MST9U3\INC) DEFINE(ModelName=MST9U3_DEMO,CHIP_ID=MST9U3) DEBUG OBJECTEXT
                    -END PRINT(.\List\mapi_mhl.lst) OBJECT(.\Obj\mapi_mhl.obj)

line level    source

   1          ///////////////////////////////////////////////////////////////////////////////////////////////////
   2          ///
   3          /// file    mapi_mhl.c
   4          /// @author MStar Semiconductor Inc.
   5          /// @brief  MHL driver Function
   6          ///////////////////////////////////////////////////////////////////////////////////////////////////
   7          
   8          #ifndef _MAPI_MHL_C_
   9          #define _MAPI_MHL_C_
  10          
  11          //-------------------------------------------------------------------------------------------------
  12          //  Include Files
  13          //-------------------------------------------------------------------------------------------------
  14          #include "Global.h"
  15          #include "Mapi_combo.h"
  16          #include "mapi_mhl.h"
  17          #include "mdrv_mhl.h"
  18          #include "mhal_mhl.h"
  19          
  20          //-------------------------------------------------------------------------------------------------
  21          //  Local Defines
  22          //-------------------------------------------------------------------------------------------------
  23          #define MHL_API_DEBUG_MESSAGE           0
  24          
  25          #if(MHL_DEBUG_MESSAGE & MHL_API_DEBUG_MESSAGE)
              #define MHL_API_DPUTSTR(str)            printMsg(str)
              #define MHL_API_DPRINTF(str, x)         printData(str, x)
              #else
  29          #define MHL_API_DPUTSTR(str)
  30          #define MHL_API_DPRINTF(str, x)
  31          #endif
  32          
  33          //-------------------------------------------------------------------------------------------------
  34          //  Local Structures
  35          //-------------------------------------------------------------------------------------------------
  36          
  37          //-------------------------------------------------------------------------------------------------
  38          //  Global Variables
  39          //-------------------------------------------------------------------------------------------------
  40          
  41          //-------------------------------------------------------------------------------------------------
  42          //  Local Variables
  43          //-------------------------------------------------------------------------------------------------
  44          
  45          //-------------------------------------------------------------------------------------------------
  46          //  Local Functions
  47          //-------------------------------------------------------------------------------------------------
  48          //**************************************************************************
  49          //  [Function Name]:
  50          //                  _mapi_mhl_InputToPortMapping()
  51          //  [Description]
  52          //
  53          //  [Arguments]:
C51 COMPILER V9.00   MAPI_MHL                                                              07/03/2017 18:41:26 PAGE 2   

  54          //
  55          //  [Return]:
  56          //
  57          //**************************************************************************
  58          #if(MHL_GET_CABLE_DETECT_SUPPORT)
              BYTE _mapi_mhl_InputToPortMapping(BYTE ucInputPort)
              {
                  if(ucInputPort == MHL_DEFINE_COMBO_IP_PORT0)
                  {
                      ucInputPort = MHL_INPUT_SELECT_PORT0;
                  }
                  else if(ucInputPort == MHL_DEFINE_COMBO_IP_PORT1)
                  {
                      ucInputPort = MHL_INPUT_SELECT_PORT1;
                  }
                  else if(ucInputPort == MHL_DEFINE_COMBO_IP_PORT2)
                  {
                      ucInputPort = MHL_INPUT_SELECT_PORT2;
                  }
                  else if(ucInputPort == MHL_DEFINE_COMBO_IP_PORT3)
                  {
                      ucInputPort = MHL_INPUT_SELECT_PORT3;
                  }
                  else if(ucInputPort == MHL_DEFINE_COMBO_IP_PORT4)
                  {
                      ucInputPort = MHL_INPUT_SELECT_PORT4;
                  }
                  else if(ucInputPort == MHL_DEFINE_COMBO_IP_PORT5)
                  {
                      ucInputPort = MHL_INPUT_SELECT_PORT5;
                  }
                  else // VGA and DP
                  {
                      ucInputPort = MHL_INPUT_SELECT_NONE;
                  }
              
                  return ucInputPort;
              }
              #endif
  93          
  94          #ifdef _WORK_ON_PM_
              //**************************************************************************
              //  [Function Name]:
              //                  _mapi_mhl_PortToInputMapping()
              //  [Description]
              //
              //  [Arguments]:
              //
              //  [Return]:
              //
              //**************************************************************************
              BYTE _mapi_mhl_PortToInputMapping(BYTE ucPortSelect)
              {
                  if(ucPortSelect == MHL_INPUT_SELECT_PORT0)
                  {
                      ucPortSelect = MHL_DEFINE_COMBO_IP_PORT0;
                  }
                  else if(ucPortSelect == MHL_INPUT_SELECT_PORT1)
                  {
                      ucPortSelect = MHL_DEFINE_COMBO_IP_PORT1;
                  }
                  else if(ucPortSelect == MHL_INPUT_SELECT_PORT2)
C51 COMPILER V9.00   MAPI_MHL                                                              07/03/2017 18:41:26 PAGE 3   

                  {
                      ucPortSelect = MHL_DEFINE_COMBO_IP_PORT2;
                  }
                  else if(ucPortSelect == MHL_INPUT_SELECT_PORT3)
                  {
                      ucPortSelect = MHL_DEFINE_COMBO_IP_PORT3;
                  }
                  else if(ucPortSelect == MHL_INPUT_SELECT_PORT4)
                  {
                      ucPortSelect = MHL_DEFINE_COMBO_IP_PORT4;
                  }
                  else if(ucPortSelect == MHL_INPUT_SELECT_PORT5)
                  {
                      ucPortSelect = MHL_DEFINE_COMBO_IP_PORT5;
                  }
              
                  return ucPortSelect;
              }
              
              //**************************************************************************
              //  [Function Name]:
              //                  _mapi_mhl_CbusRCPEventProc()
              //  [Description]
              //
              //  [Arguments]:
              //
              //  [Return]:
              //
              //**************************************************************************
              BYTE _mapi_mhl_CbusRCPEventProc(BYTE ucKeyCode)
              {
                  BYTE ucStatus = MSC_RCP_NO_ERROR;
                  BYTE ucInputPort = _mapi_mhl_PortToInputMapping(GET_MHL_CBUS_MSC_MSG_PROC_PORT());
              
                  switch(ucKeyCode)
                  {
                      case RCP_KEYID_UP:
              
                          break;
              
                      case RCP_KEYID_DOWN:
              
                          break;
              
                      case RCP_KEYID_ROOT_MENU:
              
                          break;
              
                      case RCP_KEYID_EXIT:
              
                          break;
              
                      default:
                          ucStatus = MSC_RCP_INEFFECTIVE_KEY_CODE;
                          break;
                  };
              
                  if(ucInputPort)
                  {
              
                  }
              
C51 COMPILER V9.00   MAPI_MHL                                                              07/03/2017 18:41:26 PAGE 4   

                  MHL_API_DPRINTF("** MHL receive RCP key code %x", ucKeyCode);
              
                  return ucStatus;
              }
              
              //**************************************************************************
              //  [Function Name]:
              //                  _mapi_mhl_CbusRAPEventProc()
              //  [Description]
              //
              //  [Arguments]:
              //
              //  [Return]:
              //
              //**************************************************************************
              BYTE _mapi_mhl_CbusRAPEventProc(BYTE ucKeyCode)
              {
                  BYTE ucStatus  = MSC_RAP_NO_ERROR;
                  BYTE ucInputPort = _mapi_mhl_PortToInputMapping(GET_MHL_CBUS_MSC_MSG_PROC_PORT());
              
                  switch(ucKeyCode)
                  {
                      case MSC_RAP_POLL:
              
                          break;
              
                      case MSC_RAP_CONTENT_ON:
              
                          break;
              
                      case MSC_RAP_CONTENT_OFF:
              
                          break;
              
                      default:
                          ucStatus = MSC_RAP_UNRECOGNIZED_ACTION_CODE;
                          break;
                  };
              
                  if(ucInputPort)
                  {
              
                  }
              
                  MHL_API_DPRINTF("** MHL receive RAP key code %x", ucKeyCode);
              
                  return ucStatus;
              }
              
              //**************************************************************************
              //  [Function Name]:
              //                  _mapi_mhl_CbusRCPEventProc()
              //  [Description]
              //
              //  [Arguments]:
              //
              //  [Return]:
              //
              //**************************************************************************
              BYTE _mapi_mhl_CbusUCPEventProc(BYTE ucKeyCode)
              {
                  BYTE ucStatus  = MSC_RAP_NO_ERROR;
C51 COMPILER V9.00   MAPI_MHL                                                              07/03/2017 18:41:26 PAGE 5   

                  BYTE ucInputPort = _mapi_mhl_PortToInputMapping(GET_MHL_CBUS_MSC_MSG_PROC_PORT());
              
                  switch(ucKeyCode)
                  {
                      default:
                          ucStatus = MSC_RAP_UNRECOGNIZED_ACTION_CODE;
                          break;
                  };
              
                  if(ucInputPort)
                  {
              
                  }
              
                  MHL_API_DPRINTF("** MHL receive UCP key code %x", ucKeyCode);
              
                  return ucStatus;
              }
              
              //**************************************************************************
              //  [Function Name]:
              //                  _mapi_mhl_RxHandler()
              //  [Description]
              //                  MHL handler
              //  [Arguments]:
              //
              //  [Return]:
              //
              //**************************************************************************
              void _mapi_mhl_CbusRxHandler(void)
              {
                  mdrv_mhl_CbusRxHandler();
              
                  mdrv_mhl_CbusMSGCommandProc();
              }
              
              //-------------------------------------------------------------------------------------------------
              //  Global Functions
              //-------------------------------------------------------------------------------------------------
              
              //**************************************************************************
              //  [Function Name]:
              //                  mapi_mhl_SetConfiguration()
              //  [Description]
              //
              //  [Arguments]:
              //
              //  [Return]:
              //
              //**************************************************************************
              void mapi_mhl_SetConfiguration(BYTE ucMHLEnableIndex, BYTE ucDisplayEnableIndex)
              {
                  mdrv_mhl_SetConfiguration(ucMHLEnableIndex, ucDisplayEnableIndex);
              }
              
              //**************************************************************************
              //  [Function Name]:
              //                  mapi_mhl_SetSystemControlFlag()
              //  [Description]
              //
              //  [Arguments]:
              //
C51 COMPILER V9.00   MAPI_MHL                                                              07/03/2017 18:41:26 PAGE 6   

              //  [Return]:
              //
              //**************************************************************************
              void mapi_mhl_SetSystemControlFlag(EN_MHL_SYSTEM_CONTROL ucControlType)
              {
                  switch(ucControlType)
                  {
                      case MHL_SYSTEM_FORCE_DISPLAY_ENABLE:
                          SET_MHL_SYSTEM_FORCE_DISPLAY();
                          break;
              
                      case MHL_SYSTEM_FORCE_DISPLAY_DISABLE:
                          CLR_MHL_SYSTEM_FORCE_DISPLAY();
                          break;
              
                      case MHL_SYSTEM_FORCE_SEND_MSG_ENABLE:
                          SET_MHL_SYSTEM_FORCE_SEND_MSG();
                          break;
              
                      case MHL_SYSTEM_FORCE_SEND_MSG_DISABLE:
                          CLR_MHL_SYSTEM_FORCE_SEND_MSG();
                          break;
              
                      default:
              
                          break;
                  };
              }
              
              //**************************************************************************
              //  [Function Name]:
              //                  mapi_mhl_Initial()
              //  [Description]
              //                  MHL init
              //  [Arguments]:
              //
              //  [Return]:
              //
              //**************************************************************************
              void mapi_mhl_Initial(BYTE **pComboEDID)
              {
                  MHL_API_DPUTSTR("** MHL initial setting");
              
                  mdrv_mhl_Initial(pComboEDID);
              
                  mdrv_mhl_SetMSGCallBackFunction(_mapi_mhl_CbusRCPEventProc, _mapi_mhl_CbusRAPEventProc, _mapi_mhl_Cbus
             -UCPEventProc);
              }
              
              //**************************************************************************
              //  [Function Name]:
              //                  mapi_mhl_CbusTimerInterrupt()
              //  [Description]
              //                  MHL Cbus timer control in isr
              //  [Arguments]:
              //
              //  [Return]:
              //
              //**************************************************************************
              void mapi_mhl_TimerInterrupt(void)
              {
                  if(GET_MHL_SYSTEM_TIMER_COUNT() == 0)
C51 COMPILER V9.00   MAPI_MHL                                                              07/03/2017 18:41:26 PAGE 7   

                  {
                      SET_MHL_SYSTEM_TIMER_COUNT(10);
              
                      SET_MHL_SYSTEM_TIMER_FLAG();
                  }
                  else
                  {
                      DEC_MHL_SYSTEM_TIMER_COUNT();
                  }
              }
              
              //**************************************************************************
              //  [Function Name]:
              //                  mapi_mhl_IsrHandler()
              //  [Description]
              //                  MHL isr handler
              //  [Arguments]:
              //
              //  [Return]:
              //
              //**************************************************************************
              void mapi_mhl_IsrHandler(InterruptNum eIntNum)
              {
                  UNUSED(eIntNum);
              
                  if(mdrv_mhl_GetCbusInterruptFlag())
                  {
                      mdrv_mhl_IsrHandler();
                  }
              }
              
              //**************************************************************************
              //  [Function Name]:
              //                  mapi_mhl_Handler()
              //  [Description]
              //                  MHL handler
              //  [Arguments]:
              //
              //  [Return]:
              //
              //**************************************************************************
              void mapi_mhl_Handler(void)
              {
                  mdrv_mhl_TimerHandler();
              
                  mdrv_mhl_CheckStatusPolling();
              
                  _mapi_mhl_CbusRxHandler();
              
                  mdrv_mhl_CbusTxHandler();
              }
              
              //**************************************************************************
              //  [Function Name]:
              //                  mapi_mhl_SendRCPCommand
              //  [Description]
              //                  MHL Cbus MSC Send RCP Command
              //  [Arguments]:
              //
              //  [Return]:
              //                  TRUE: success
              //                  FALSE: fail
C51 COMPILER V9.00   MAPI_MHL                                                              07/03/2017 18:41:26 PAGE 8   

              //**************************************************************************
              Bool mapi_mhl_SendRCPCommand(BYTE ucInputPort, BYTE ucKeyCode)
              {
                  BYTE ucPortSelect = _mapi_mhl_InputToPortMapping(ucInputPort);
              
                  return mdrv_mhl_CbusSendRCPCommand(ucPortSelect, ucKeyCode);
              }
              
              //**************************************************************************
              //  [Function Name]:
              //                  mapi_mhl_SendRAPCommand
              //  [Description]
              //                  MHL Cbus MSC Send RAP Command
              //  [Arguments]:
              //
              //  [Return]:
              //                  TRUE: success
              //                  FALSE: fail
              //**************************************************************************
              Bool mapi_mhl_SendRAPCommand(BYTE ucInputPort, BYTE ucKeyCode)
              {
                  BYTE ucPortSelect = _mapi_mhl_InputToPortMapping(ucInputPort);
              
                  return mdrv_mhl_CbusSendRAPCommand(ucPortSelect, ucKeyCode);
              }
              
              //**************************************************************************
              //  [Function Name]:
              //                  mapi_mhl_SendUCPCommand
              //  [Description]
              //                  MHL Cbus MSC Send UCP Command
              //  [Arguments]:
              //
              //  [Return]:
              //                  TRUE: success
              //                  FALSE: fail
              //**************************************************************************
              Bool mapi_mhl_SendUCPCommand(BYTE ucInputPort, BYTE ucKeyCode)
              {
                  BYTE ucPortSelect = _mapi_mhl_InputToPortMapping(ucInputPort);
              
                  return mdrv_mhl_CbusSendUCPCommand(ucPortSelect, ucKeyCode);
              }
              
              //**************************************************************************
              //  [Function Name]:
              //                  mapi_mhl_SourceChange
              //  [Description]
              //
              //  [Arguments]:
              //
              //  [Return]:
              //
              //**************************************************************************
              void mapi_mhl_SourceChange(void)
              {
              
              }
              
              //**************************************************************************
              //  [Function Name]:
              //                  mapi_mhl_PowerControl
C51 COMPILER V9.00   MAPI_MHL                                                              07/03/2017 18:41:26 PAGE 9   

              //  [Description]
              //                  MHL power control
              //  [Arguments]:
              //
              //  [Return]:
              //
              //**************************************************************************
              void mapi_mhl_PowerControl(BYTE ucState)
              {
                  mdrv_mhl_PowerControl(ucState);
              }
              #endif
 499          
 500          #if(MHL_GET_CABLE_DETECT_SUPPORT)
              //**************************************************************************
              //  [Function Name]:
              //                  mapi_mhl_GetCableDetectPort
              //  [Description]
              //
              //  [Arguments]:
              //
              //  [Return]:
              //
              //**************************************************************************
              Bool mapi_mhl_GetCableDetectPort(BYTE ucInputPort)
              {
                  BYTE ucPortSelect = _mapi_mhl_InputToPortMapping(ucInputPort);
              
                  return mdrv_mhl_GetCableDetectPort(ucPortSelect);
              }
              
              #endif
 519          
 520          #endif // _MAPI_MHL_C_
 521          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
