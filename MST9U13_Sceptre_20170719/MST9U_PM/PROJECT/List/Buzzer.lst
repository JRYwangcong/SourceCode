C51 COMPILER V9.00   BUZZER                                                                07/03/2017 18:41:25 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE BUZZER
OBJECT MODULE PLACED IN .\Obj\Buzzer.obj
COMPILER INVOKED BY: C:\Keil4\C51\BIN\C51.EXE ..\Code\Buzzer.c OPTIMIZE(9,SPEED) BROWSE INCDIR(..\Code\INC;..\Code\DRIVE
                    -R\INC;..\Code\DRIVER\MST9U\INC;..\Code\DRIVER\MST9U3\INC) DEFINE(ModelName=MST9U3_DEMO,CHIP_ID=MST9U3) DEBUG OBJECTEXTEN
                    -D PRINT(.\List\Buzzer.lst) OBJECT(.\Obj\Buzzer.obj)

line level    source

   1          #include "buzzer.h"
   2          #include "Ms_rwreg.h"
   3          #include "global.h"
   4          #include "Common.h"
   5          #include "drvGPIO.h"
   6          
   7          #define BUZZER_DEBUG    1
   8          #if ENABLE_DEBUG&&BUZZER_DEBUG
                  #define BUZZER_printData(str, value)   printData(str, value)
                  #define BUZZER_printMsg(str)           printMsg(str)
              #else
  12              #define BUZZER_printData(str, value)
  13              #define BUZZER_printMsg(str)
  14          #endif
  15          
  16          #if ENABLE_BUZZER
              #if 0
              void LowFrequencyBeep(void)
              {
              //3khz frequency and 50% duty and 200ms
                  g_ucPWMTimer = BUZZER_TIME;
                  msDrvPWMFreq(BUZZER_PWM, BUZZER_LOWFREQ_FREQ);
                  msAPIPWMDuty(BUZZER_PWM, BUZZER_DUTY);
                  BUZZER_printMsg("**Low Frequency Beep**");
              }
              void HighFrequencyBeep(void)
              {
              //4.6khz frequency and 50% duty and 200ms
                  g_ucPWMTimer = BUZZER_TIME;
                  msDrvPWMEnableSwitch(BUZZER_PWM, TRUE);
                  msDrvPWMFreq(BUZZER_PWM, BUZZER_HIGHFREQ_FREQ);
                  msAPIPWMDuty(BUZZER_PWM, BUZZER_DUTY);
                  BUZZER_printMsg("**High Frequency Beep**");
              }
              #endif
              void BuzzerInitial(void)
              {
                  BYTE u8RegShift;
                  for(u8RegShift=0;u8RegShift<2;u8RegShift++)     //PWM pad control
                  {
                      msWrite2ByteMask(REG_000408+4*u8RegShift,BUZZER_PWM>>10*u8RegShift,0x3FF);
                      msWriteByteMask(REG_000418+u8RegShift,BUZZER_PWM>>(20+6*u8RegShift),0x3F);
                  }
                  BUZZER_printMsg("BuzzerInitial");
              }
              #if 0
              void MuteBuzzer(void)
              {
              #if (BOARD_TYPE_SEL == BD_DELL_AW2310)
                     return;
              #endif
                  msWriteBit(REG_1B09, FALSE, _BIT4);
                  BUZZER_printData("MuteBuzzer 1%x",msReadByte(REG_1B09)      );
C51 COMPILER V9.00   BUZZER                                                                07/03/2017 18:41:25 PAGE 2   

              
                  msSetPwmDuty(PWM4_Channel,0xFF);
              }
              #endif
              void LowBeep(void)
              {
              // 800Hz frequency and 50% duty and 200ms
                  g_ucPWMTimer = BUZZER_TIME;
                  msDrvPWMEnableSwitch(BUZZER_PWM, TRUE);
                  msDrvPWMFreq(BUZZER_PWM, BUZZER_LOW_FREQ);
                  msAPIPWMDuty(BUZZER_PWM, BUZZER_DUTY);
                  BUZZER_printMsg("**Low Frequency Beep**");
              
              }
              void HighBeep(void)
              {
              //1.92KHz frequency and 50% duty and 200ms
                  g_ucPWMTimer = BUZZER_TIME;
                  msDrvPWMEnableSwitch(BUZZER_PWM, TRUE);
                  msDrvPWMFreq(BUZZER_PWM, BUZZER_HIGH_FREQ);
                  msAPIPWMDuty(BUZZER_PWM, BUZZER_DUTY);
                  BUZZER_printMsg("**High Frequency Beep**");
              }
              void BuzzerMute(void)
              {
                  //g_bTriggerBuzzer = FALSE;
                  msDrvPWMEnableSwitch(BUZZER_PWM, FALSE);
                  BUZZER_printMsg("**Mute Beep**");
              }
              #endif


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   ----    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
