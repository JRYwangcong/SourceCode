Output of:
aeon-gcc -Wall -Wshadow -Wwrite-strings -Wundef -Wstrict-prototypes -Wunused -Wunused-parameter -Wunused-function -Wunused-value -Wmissing-prototypes -Wmissing-declarations -Wdeclaration-after-statement -Wold-style-definition -fno-builtin-strlen -finline-limit=0 -fomit-frame-pointer -ffunction-sections -fdata-sections -fno-guess-branch-probability -funsigned-char -static-libgcc -falign-functions=1 -falign-jumps=1 -falign-labels=1 -falign-loops=1 -fno-pic -Os -G 0 -march=aeonR2 -EL -EL -nostdlib -o out/sboot.elf -Wl,--sort-common -Wl,--gc-sections -Wl,-T,sboot_ldscript -Wl,--whole-archive -Wl,--start-group src/lib.a src/MST9U/lib.a src/built-in.o src/MST9U/built-in.o -Wl,--end-group -Wl,--no-whole-archive -Wl,--warn-common -Wl,-Map,out/sboot.elf.map -Wl,--verbose
==========
GNU ld version 2.17.50.0.9 20070103
  Supported emulations:
   aeon1_elf
   aeon2_elf
   aeonR2_elf
   aeon1_elfl
   aeon2_elfl
   aeonR2_elfl
using external linker script:
==================================================


/*
 * Automatically generated C config: don't edit
 * SBoot version: 1.0.0
 */







/*
 * Platform Configuration
 */
/*
 * General Configuration
 */
/*
 * Build Options
 */
/*
 * Debugging Options
 */
/*
 * Installation Options
 */
/*
 * Module Options
 */
ENTRY(__reset)
MEMORY
{
    ram : ORIGIN = 0x00000000, LENGTH = 0x1000000 /* MST9U flash support 16M ??*/
    sram : ORIGIN = 0xB0000000, LENGTH = 0x2000 /* MST9U: 0x2000, 8KB*/
    ld2 : ORIGIN = 0x01000100, LENGTH = 0x10000
}
SECTIONS
{
    .vectors : { . = .; KEEP(*(.reset)) KEEP(*(.vectors)) } > ram
    .interp ALIGN (0x8) : { *(.interp) } > ram
    .hash : AT ((LOADADDR (.interp) + SIZEOF (.interp) + 8 - 1) & ~ (8 - 1)) { *(.hash) } > ram
    .dynsym : AT ((LOADADDR (.hash) + SIZEOF (.hash) + 8 - 1) & ~ (8 - 1)) { *(.dynsym) } > ram
    .dynstr : AT ((LOADADDR (.dynsym) + SIZEOF (.dynsym) + 8 - 1) & ~ (8 - 1)) { *(.dynstr) } > ram
    .init ALIGN (0x8) : { . = .; KEEP (*(.init)) } > ram = 0
    .boot_data 0x00002000: { __boot_data = .; *(.boot_data) } > ram /* for system_init data */
    .text ALIGN(0x10):
    {
        __stext = .; *(.text*) *(.gnu.warning) *(.gnu.linkonce.t.*)
    } > ram
    __etext = .; PROVIDE (etext = .);
    .fini ALIGN (0x4) : { . = .; KEEP (*(.fini)) } > ram =0
    .rodata ALIGN (0x8) : { . = .; *(.rodata) *(.rodata*) *(.gnu.linkonce.r*) } > ram
    .fixup ALIGN (0x4) : { __FIXUP_START__ = ABSOLUTE(.); *(.fixup) __FIXUP_END__ = ABSOLUTE(.);} > ram
    .gcc_except_table ALIGN (0x4) : { __EXCEPT_START__ = ABSOLUTE(.); *(.gcc_except_table) __EXCEPT_END__ = ABSOLUTE(.);} > ram
    .data ALIGN (0x8) : { __ram_data_start = ABSOLUTE(.); *(.gnu.linkonce.d*) *( .2ram.*) . = ALIGN (8); SORT(CONSTRUCTORS) } > ram
    __rom_data_start = LOADADDR(.data);
    .eh_frame ALIGN (0x8) : { . = .; __EH_FRAME_BEGIN__ = .; KEEP(*(.eh_frame)) __FRAME_END__ = .; . = . + 8; } > ram = 0
    .ctors ALIGN (0x8) : { . = .; KEEP (*crtbegin.o(.ctors)) KEEP (*_ctors.o(.ctors)) ___CTOR_LIST__ = .; PROVIDE (__CTOR_LIST__ = .); KEEP (*(.ctors)); KEEP (*(SORT(.ctors.*))) ___CTOR_END__ = .; PROVIDE (___CTOR_END__ = .); } > ram
    .dtors ALIGN (0x8) : { . = .; KEEP (*crtbegin.o(.dtors)) __DTOR_LIST__ = .; PROVIDE (__DTOR_LIST__ = .); KEEP (*(SORT(.dtors.*))) __DTOR_END__ = .; KEEP (*(.dtors)); PROVIDE (__DTOR_END__ = .); } > ram
    .got ALIGN (0x8) : { . = .; *(.got.plt) *(.got*) } > ram
    .dynamic ALIGN (0x8) : { . = .; *(.dynamic) } > ram
    .sdata ALIGN (0x8) : { __SDATA_START__ = ABSOLUTE(.); . = .; *(.sdata) *(.sdata.*) *(.gnu.linkonce.s*) } > ram
    .sbss ALIGN (0x8) : { __sbss_start = ABSOLUTE (.); __SBSS_START__ = ABSOLUTE(.); *(.sbss.*) __SBSS_END__ = ABSOLUTE(.); __SBSSx_START__ = ABSOLUTE(.); *(.sbss*) __SBSSx_END__ = ABSOLUTE(.); *(.scommon*) __sbss_end = ABSOLUTE (.); } > ram
    .lit8 ALIGN (0x8) : { . = .; *(.lit8) _MY_MARK = . ; LONG(0xAABBCCDD) . = ALIGN(0x10); } > ram
    __text_length = .;
 ___data2_start_s = .; /*data2 start - source address*/
    .data2 0xB0000000 : AT(LOADADDR(.lit8) + SIZEOF(.lit8)) /* T2: oxc000000  */
    {
     ___data2_start_d = ABSOLUTE (.); /*data2 start - destination address*/
      *(.data*) *(.data.*);
    } > sram
 ___data2_end_s = LOADADDR(.data2) + SIZEOF(.data2);
    .bss : AT(LOADADDR(.data2) + SIZEOF(.data2)) /* T2: oxc000000  */
    {
        __bss_start = ABSOLUTE (.);
        *(.dynbss*) *(.bss) *(.bss.*) *(COMMON)
        . = ALIGN(0x10);
        __bss_end = ABSOLUTE (.);
    } > sram
    .ld2 : AT(LOADADDR(.bss) + SIZEOF(.bss))
    {
        _loader_2nd_vma = .;
        *(.loader_2nd_start.*);
        *(.loader_2nd.*);
    } > ld2
    _loader_2nd_lma = LOADADDR(.ld2);
    _loader_2nd_len = SIZEOF(.ld2);
 . = LOADADDR(.ld2) + SIZEOF(.ld2);
 __sboot_end = ALIGN(0x10000);
    .padding : AT(__sboot_end - 4)
    {
        LONG(0x0)
    } > ram
    /* for sbrk.c */
    ___heap = 0x83000000; ___heap_end = 0x85000000;
    /* for usb */
    __usb_big_var_in_mem = ___heap_end; /*size = 0x00100000*/
 __usb_download_buffer = 0x01000000; /*size = 0x00800000*/
 __file_system_pool_buffer = 0x02000000; /*size = 0x00060000*/
 _RISC32_DCACHE_SIZE = 8192;
 _RISC32_DCACHE_LINE_SIZE = 16;
 _RISC32_DCACHE_WAYS = 4;
 PROVIDE(_boot_stack = 0xB0001FF0); /* MST9U: 0x2000, 8KB*/
}

==================================================
attempt to open src/lib.a succeeded
(src/lib.a)7alloc.o
(src/lib.a)MSDecompress.o
(src/lib.a)lzmadec.o
(src/lib.a)zlib.o
attempt to open src/MST9U/lib.a succeeded
(src/MST9U/lib.a)backtrace.o
(src/MST9U/lib.a)bootaeonsysinit.o
(src/MST9U/lib.a)cache.o
(src/MST9U/lib.a)context.o
(src/MST9U/lib.a)ddr_bd_mst203a_a01a_esmt_1333.o
(src/MST9U/lib.a)ddr_bd_mst203a_a01a_etron_1333.o
(src/MST9U/lib.a)ddr_bd_mst203a_a01a_winbond_1333.o
(src/MST9U/lib.a)drvAeonUART.o
(src/MST9U/lib.a)drvGlobal.o
(src/MST9U/lib.a)drvPadConf.o
(src/MST9U/lib.a)exception.o
(src/MST9U/lib.a)init_MST9U.o
(src/MST9U/lib.a)interrupt.o
(src/MST9U/lib.a)printf.o
(src/MST9U/lib.a)puts.o
(src/MST9U/lib.a)reset.o
(src/MST9U/lib.a)risc32.o
(src/MST9U/lib.a)setSPI.o
(src/MST9U/lib.a)snprintf.o
(src/MST9U/lib.a)stack.o
(src/MST9U/lib.a)vectors.o
(src/MST9U/lib.a)vsnprintf.o
attempt to open src/built-in.o succeeded
attempt to open src/MST9U/built-in.o succeeded
